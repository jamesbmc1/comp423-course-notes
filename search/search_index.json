{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to James McNeill's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: James McNeill</li> <li>Reviewer: Charles Wilt</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before moving on to the tutorial, make sure you have the following completed: </p> <ol> <li>Git: Install Git if you haven't already. </li> <li>Visual Studio Code (VS Code): Download and Install VSCode if necessary.</li> <li>Docker: Necessary to run the dev container. </li> </ol>"},{"location":"tutorials/rust-setup/#part-1-creating-the-repository","title":"Part 1: Creating the Repository","text":""},{"location":"tutorials/rust-setup/#step-1-initializing-git-and-creating-a-local-repository","title":"Step 1: Initializing Git and Creating a Local Repository","text":"<ol> <li>Open Terminal or Command Prompt</li> <li>Create a new directory for your project  <pre><code>mkdir rust-tutorial-comp423\ncd rust-tutorial-comp423\n</code></pre></li> <li>Initialize a new git repository <pre><code>git init\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#part-2-setting-up-the-development-environment","title":"Part 2: Setting Up the Development Environment","text":""},{"location":"tutorials/rust-setup/#step-2-add-development-container-configuration","title":"Step 2: Add Development Container Configuration","text":"<ol> <li>Install the Dev Containers extension in VSCode.</li> <li>In VSCode, open your rust-tutorial-comp423 directory. </li> <li>Create a .devcontainer directory in the root of your project. </li> <li>Add the following file to the \"hidden\" configuration directory:  <pre><code>.devcontainer/devcontainer.json\n</code></pre></li> <li>Add the following information to the devcontainer.json : </li> </ol> <pre><code>{\n    \"name\": \"Rust Development Environment\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre> <p>Make Sure You Save <code>devcontainer/devcontainer.json</code> before launching dev conatiner</p> <p>\"name\": This is the name for your dev container.</p> <p>\"image\": The docker image to use, which is the latest version of Rust.</p> <p>\"customizations\": A list of VSCode extensions. In this case, it is the rust-analzayer.</p>"},{"location":"tutorials/rust-setup/#part-3-opening-dev-container-and-verifying-installation","title":"Part 3: Opening Dev Container and Verifying Installation","text":""},{"location":"tutorials/rust-setup/#step-3-opening-dev-container","title":"Step 3: Opening Dev Container","text":"<p>Open the project in the container by pressing <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P on Mac</code>), typing \"Dev Containers: Reopen in Container,\"  and selecting the option. This may take a few minutes while the image is downloaded and the requirements are installed.</p>"},{"location":"tutorials/rust-setup/#step-4-check-installation","title":"Step 4: Check Installation","text":"<p>Once the Dev Container is running, open up a terminal (Terminal -&gt; New Terminal). Run the following command:  <pre><code>rustc --version\n</code></pre></p> <p>This displays the current version of Rust that you have, confirming that you have properly installed it!</p>"},{"location":"tutorials/rust-setup/#part-4-creating-a-new-rust-project-and-creatingrunning-a-program","title":"Part 4: Creating a New Rust Project and Creating/Running a Program","text":""},{"location":"tutorials/rust-setup/#part-5-creating-a-new-rust-project","title":"Part 5: Creating a new Rust Project","text":"<p>Use Cargo to create a new project: <pre><code>cargo new --vcs none hello_comp423\ncd hello_comp423\n</code></pre> The --vcs none flag makes it to where Cargo does not create a new git repository</p>"},{"location":"tutorials/rust-setup/#part-6-writing-the-hello-comp423-program","title":"Part 6: Writing the \"Hello COMP423\" Program","text":"<ol> <li>Open the main file in the src folder ('src/main')</li> <li>Replace the contents of main with the following:  <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#part-7-building-and-running-the-program","title":"Part 7: Building and Running the Program","text":"<p>Use the following command to compile the program:  <pre><code>cargo build\n</code></pre></p> <p>This compiles your code and creates the folder target\\debug and creates an executable. This is similar to GCC in 211 as you compile first and then run the executable file. </p> <p>You could also use the following command to run the program:  <pre><code>cargo run\n</code></pre></p> <p>Distinction</p> <p>cargo run can be used to build and compile the program at the same time instead of doing two separate steps. </p> <p>Your Program should output \"Hello COMP423\" in the terminal. This means that you have properly installed and made a Rust function!</p>"},{"location":"tutorials/rust-setup/#citation","title":"Citation:","text":"<p>Title:  Starting a Static Website Project with MkDocs</p> <p>Author: Kris Jordan</p> <p>Link: https://comp423-25s.github.io/resources/MkDocs/tutorial/</p>"}]}